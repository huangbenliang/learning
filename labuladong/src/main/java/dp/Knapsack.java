package dp;

/**Question:背包问题
 * 给你一个可装载重量为W的背包和N个物品，每个物品有重量和价值两个属性。
 * 其中第i个物品的重量为wt[i]，价值为val[i]，
 * 现在让你用这个背包装物品，最多能装的价值是多少？
 *
 * Answer:
 * 一. 明确状态变量和选择
 * 也就是明确有几个变化的维度,可以穷举出所有的可能性(每一个可能性就是一个状态)
 * 重要:有几个维度就有几层for循环,本质就是在穷举.
 * 穷举方法:先假设一部分变量不变,增加其中一个变量.
 * 根据题意确定增加的这个变量有几种处理方法(即做选择)
 * 这种处理方法会导致最值如何变化(想办法找到与之前求出的解的关系,即递推式)
 *
 * 二. 明确解空间的定义
 * tips:一般会初始化[多一位],为了给初始情况赋值.
 * 在确定解空间时,不要将其中的变量不要再假设成变量,而是当成其前面的变量全部已经求出.
 * 现在就是要根据数学归纳法,如何根据前面已经有的结果,推出当前的值.
 *
 * 三. 思考选择如何影响最值(状态转移方程)
 * 根据题目意思,如何处理新增加的变量. 将会如何影响最值.
 *
 * 四. 完成代码,处理边界情况
 */


public class Knapsack {
	int knapsack(int w, int n, int[] wt, int[] val) {
		int[][] dp = new int[n + 1][w + 1];
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= w; j++) {
				if (j - wt[i - 1] < 0) {
					dp[i][j] = dp[i - 1][j];
				} else {
					dp[i][j] = Math.max(dp[i - 1][j], val[i - 1] + dp[i - 1][j - wt[i - 1]]);
				}
			}
		}
		return dp[n][w];
	}
}
